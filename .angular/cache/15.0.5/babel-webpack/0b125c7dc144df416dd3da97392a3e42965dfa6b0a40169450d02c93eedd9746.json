{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport { User } from '../shared/models/User';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst USER_KEY = 'User';\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.userSubject = new BehaviorSubject(this.getUserFromLocalStorage());\n    this.userObservable = this.userSubject.asObservable();\n  }\n  get currentUser() {\n    return this.userSubject.value;\n  }\n  login(userLogin) {\n    return this.http.post(environment.USER_LOGIN_URL, userLogin).pipe(tap({\n      next: user => {\n        this.setUserToLocalStorage(user);\n        this.userSubject.next(user);\n        // this.toastrService.success(\n        //   `Welcome to Foodmine ${user.name}!`,\n        //   'Login Successful'\n        // )\n      },\n\n      error: errorResponse => {\n        // this.toastrService.error(errorResponse.error, 'Login Failed');\n      }\n    }));\n  }\n  register(userRegiser) {\n    return this.http.post(environment.USER_REGISTER_URL, userRegiser).pipe(tap({\n      next: user => {\n        this.setUserToLocalStorage(user);\n        this.userSubject.next(user);\n        // this.toastrService.success(\n        //   `Welcome to the Foodmine ${user.name}`,\n        //   'Register Successful'\n        // )\n      },\n\n      error: errorResponse => {\n        // this.toastrService.error(errorResponse.error,\n        //   'Register Failed')\n      }\n    }));\n  }\n  logout() {\n    this.userSubject.next(new User());\n    localStorage.removeItem(USER_KEY);\n    window.location.reload();\n  }\n  setUserToLocalStorage(user) {\n    localStorage.setItem(USER_KEY, JSON.stringify(user));\n  }\n  getUserFromLocalStorage() {\n    const userJson = localStorage.getItem(USER_KEY);\n    if (userJson) return JSON.parse(userJson);\n    return new User();\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,EAAcC,GAAG,QAAQ,MAAM;AAIvD,SAASC,IAAI,QAAQ,uBAAuB;AAC5C,SAASC,WAAW,QAAQ,8BAA8B;;;AAE1D,MAAMC,QAAQ,GAAG,MAAM;AAIvB,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAe;IAAf,SAAI,GAAJA,IAAI;IAHhB,gBAAW,GACnB,IAAIP,eAAe,CAAO,IAAI,CAACQ,uBAAuB,EAAE,CAAC;IAGvD,IAAI,CAACC,cAAc,GAAG,IAAI,CAACC,WAAW,CAACC,YAAY,EAAE;EACvD;EAEA,IAAWC,WAAW;IACpB,OAAO,IAAI,CAACF,WAAW,CAACG,KAAK;EAC/B;EAEAC,KAAK,CAACC,SAAoB;IACxB,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAOb,WAAW,CAACc,cAAc,EAAEF,SAAS,CAAC,CAACG,IAAI,CACrEjB,GAAG,CAAC;MACFkB,IAAI,EAAGC,IAAI,IAAI;QACb,IAAI,CAACC,qBAAqB,CAACD,IAAI,CAAC;QAChC,IAAI,CAACV,WAAW,CAACS,IAAI,CAACC,IAAI,CAAC;QAC3B;QACA;QACA;QACA;MACF,CAAC;;MACDE,KAAK,EAAGC,aAAa,IAAI;QACvB;MAAA;KAEH,CAAC,CACH;EACH;EAEAC,QAAQ,CAACC,WAAyB;IAChC,OAAO,IAAI,CAAClB,IAAI,CAACS,IAAI,CAAOb,WAAW,CAACuB,iBAAiB,EAAED,WAAW,CAAC,CAACP,IAAI,CAC1EjB,GAAG,CAAC;MACFkB,IAAI,EAAGC,IAAI,IAAI;QACb,IAAI,CAACC,qBAAqB,CAACD,IAAI,CAAC;QAChC,IAAI,CAACV,WAAW,CAACS,IAAI,CAACC,IAAI,CAAC;QAC3B;QACA;QACA;QACA;MACF,CAAC;;MACDE,KAAK,EAAGC,aAAa,IAAI;QACvB;QACA;MAAA;KAEH,CAAC,CACH;EACH;EAGAI,MAAM;IACJ,IAAI,CAACjB,WAAW,CAACS,IAAI,CAAC,IAAIjB,IAAI,EAAE,CAAC;IACjC0B,YAAY,CAACC,UAAU,CAACzB,QAAQ,CAAC;IACjC0B,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;EAC1B;EAEQX,qBAAqB,CAACD,IAAS;IACrCQ,YAAY,CAACK,OAAO,CAAC7B,QAAQ,EAAE8B,IAAI,CAACC,SAAS,CAACf,IAAI,CAAC,CAAC;EACtD;EAEQZ,uBAAuB;IAC7B,MAAM4B,QAAQ,GAAGR,YAAY,CAACS,OAAO,CAACjC,QAAQ,CAAC;IAC/C,IAAGgC,QAAQ,EAAE,OAAOF,IAAI,CAACI,KAAK,CAACF,QAAQ,CAAS;IAChD,OAAO,IAAIlC,IAAI,EAAE;EACnB;;;mBAhEWG,WAAW;AAAA;;SAAXA,WAAW;EAAAkC,SAAXlC,WAAW;EAAAmC,YAFV;AAAM","names":["BehaviorSubject","tap","User","environment","USER_KEY","UserService","constructor","http","getUserFromLocalStorage","userObservable","userSubject","asObservable","currentUser","value","login","userLogin","post","USER_LOGIN_URL","pipe","next","user","setUserToLocalStorage","error","errorResponse","register","userRegiser","USER_REGISTER_URL","logout","localStorage","removeItem","window","location","reload","setItem","JSON","stringify","userJson","getItem","parse","factory","providedIn"],"sourceRoot":"","sources":["/Users/aliduchuy/Desktop/RestaurantBooking/src/app/services/user.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\n// import { USER_LOGIN_URL, USER_REGISTER_URL } from '../shared/constants/urls';\nimport { IUserLogin } from '../shared/interfaces/IUserLogin';\nimport { IUserRegister } from '../shared/interfaces/IUserRegister';\nimport { User } from '../shared/models/User';\nimport { environment } from 'src/environments/environment';\n\nconst USER_KEY = 'User';\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private userSubject =\n  new BehaviorSubject<User>(this.getUserFromLocalStorage());\n  public userObservable:Observable<User>;\n  constructor(private http:HttpClient) {\n    this.userObservable = this.userSubject.asObservable();\n  }\n\n  public get currentUser():User{\n    return this.userSubject.value;\n  }\n\n  login(userLogin:IUserLogin):Observable<User>{\n    return this.http.post<User>(environment.USER_LOGIN_URL, userLogin).pipe(\n      tap({\n        next: (user) =>{\n          this.setUserToLocalStorage(user);\n          this.userSubject.next(user);\n          // this.toastrService.success(\n          //   `Welcome to Foodmine ${user.name}!`,\n          //   'Login Successful'\n          // )\n        },\n        error: (errorResponse) => {\n          // this.toastrService.error(errorResponse.error, 'Login Failed');\n        }\n      })\n    );\n  }\n\n  register(userRegiser:IUserRegister): Observable<User>{\n    return this.http.post<User>(environment.USER_REGISTER_URL, userRegiser).pipe(\n      tap({\n        next: (user) => {\n          this.setUserToLocalStorage(user);\n          this.userSubject.next(user);\n          // this.toastrService.success(\n          //   `Welcome to the Foodmine ${user.name}`,\n          //   'Register Successful'\n          // )\n        },\n        error: (errorResponse) => {\n          // this.toastrService.error(errorResponse.error,\n          //   'Register Failed')\n        }\n      })\n    )\n  }\n\n\n  logout(){\n    this.userSubject.next(new User());\n    localStorage.removeItem(USER_KEY);\n    window.location.reload();\n  }\n\n  private setUserToLocalStorage(user:User){\n    localStorage.setItem(USER_KEY, JSON.stringify(user));\n  }\n\n  private getUserFromLocalStorage():User{\n    const userJson = localStorage.getItem(USER_KEY);\n    if(userJson) return JSON.parse(userJson) as User;\n    return new User();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}